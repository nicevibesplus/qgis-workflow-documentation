# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutomatedWorkflowDocumentation
                                 A QGIS plugin
 This plugin automatically documents the whole workflow of data processing to enhance map reproducibility.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Andreas Rademaker
        email                : andreas.rademaker@uni-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys

# Import QGIS core classes
from qgis.core import QgsProject
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

# Import the code for the dialog
from .Plugin.main_dialog import MainDialog

# Initialize Qt resources from file resources.py
from .resources import *  # noqa F403

# load libs from libs directory (important for rocrate library)
plugin_dir = os.path.dirname(__file__)
libs_path = os.path.join(plugin_dir, "libs")
if libs_path not in sys.path:
    sys.path.insert(0, libs_path)


class AutomatedWorkflowDocumentation:
    """QGIS Plugin Implementation."""

    # ============================================================================
    # INITIALIZATION
    # ============================================================================

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            "i18n",
            "AutomatedWorkflowDocumentation_{}.qm".format(locale),
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Automated Workflow Documentation")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Initialize dlg attribute
        self.dlg = None

    # ============================================================================
    # UTILITY / HELPER METHODS
    # ============================================================================

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("AutomatedWorkflowDocumentation", message)

    def is_project_open(self):
        """Check if a QGIS project is currently open.

        :returns: True if a project is open, False otherwise.
        :rtype: bool
        """
        project = QgsProject.instance()

        # Check if project has a file name (saved project) or if it has layers
        # A new unsaved project with layers should also be considered "open"
        return (
            not project.fileName() == ""  # Has saved project file
            or len(project.mapLayers()) > 0  # Has layers (even if unsaved)
        )

    def _show_no_project_message(self):
        """Show a message box informing the user that no project is open."""
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setWindowTitle(self.tr("No Project Open"))
        msg_box.setText(self.tr("No QGIS project is currently open."))
        msg_box.setInformativeText(
            self.tr(
                "Please open a QGIS project before using the Automated Workflow Documentation plugin."
            )
        )
        msg_box.setStandardButtons(QMessageBox.Ok)
        msg_box.exec_()

    # ============================================================================
    # QGIS PLUGIN INTERFACE
    # ============================================================================

    def initGui(self):  # noqa: N802
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ":/plugins/automated_workflow_documentation/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Automated Workflow Documentation"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr("&Automated Workflow Documentation"), action
            )
            self.iface.removeToolBarIcon(action)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def run(self):
        """Run method that performs all the real work"""
        # Check if a project is open before showing the dialog
        if not self.is_project_open():
            self._show_no_project_message()
            return

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start is True:
            self.first_start = False
            self.dlg = MainDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass